trigger:
  branches:
    include:
      - main
  paths:
    include:
      - '**/*.exe'

pool:
  vmImage: 'windows-latest'

steps:
- checkout: self
  persistCredentials: true

    
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      # Get the list of changed files in the commit
      $changedFiles = git diff-tree --no-commit-id --name-only -r HEAD
      $exeFiles = $changedFiles | Where-Object { $_ -like "*.exe" }
          
      if ($exeFiles) {
        Write-Host "##vso[task.setvariable variable=FOUND_EXE]true"
        $exeFiles | ForEach-Object { Write-Host "##vso[task.setvariable variable=EXE_PATH]$_" }
      } else {
        Write-Host "##vso[task.setvariable variable=FOUND_EXE]false"
      }
  displayName: 'Check for EXE changes'



- task: AzureKeyVault@2
  inputs:
    azureSubscription: 'codeSignPrincipal'
    KeyVaultName: 'Kahf-Yazilim-cert'
    SecretsFilter: '*'
  condition: eq(variables['FOUND_EXE'], 'true')


- powershell: |
    Write-Host "Setting DOTNET_SKIP_FIRST_TIME_EXPERIENCE environment variable"
    $env:DOTNET_SKIP_FIRST_TIME_EXPERIENCE = "true"
    Write-Host "Installing AzureSignTool"
    dotnet tool install --global AzureSignTool --version 2.0.17
  displayName: 'Install AzureSignTool'
  condition: eq(variables['FOUND_EXE'], 'true')


- powershell: |
    AzureSignTool sign `
      -du "https://kahf.dev" `
      -kvu "$(env:KeyVaultUrl)" `
      -kvi "$(env:ClientId)" `
      -kvs "$(env:ClientSecret)" `
      -kvc "$(env:CertificateName)" `
      -tr "http://timestamp.digicert.com" `
      -v `
      "$(EXE_PATH)"
  displayName: 'Sign EXE with AzureSignTool'
  condition: eq(variables['FOUND_EXE'], 'true')


- powershell: |
    git config --global user.email "pipeline@example.com"
    git config --global user.name "Azure Pipeline"
    git add "$(EXE_PATH)"
    git commit -m "Add signed EXE: $(EXE_PATH)"
    git push origin main
  displayName: 'Push signed EXE to repo'
  condition: eq(variables['FOUND_EXE'], 'true')

