trigger:
  branches:
    include:
      - main
      - dev/sign-msi
  paths:
    include:
      - '**/*.exe'
      - '**/*.msi'

pool:
  vmImage: 'windows-latest'

steps:
- checkout: self
  persistCredentials: true

- task: AzureKeyVault@2
  inputs:
    azureSubscription: 'codeSignPrincipal'
    KeyVaultName: 'Kahf-Yazilim-cert'
    SecretsFilter: '*'
    RunAsPreJob: true
    
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      # Get the list of changed files in the commit
      $changedFiles = git diff-tree --no-commit-id --name-only -r HEAD

      # Filter for EXE and MSI files only
      $filesToSign = $changedFiles | Where-Object { $_ -like "*.exe" -or $_ -like "*.msi" }
          
      # Set pipeline variables based on found files
      if ($filesToSign) {
        Write-Host "##vso[task.setvariable variable=FOUND_FILES]true"
        $filesToSign | ForEach-Object {
          Write-Host "##vso[task.setvariable variable=FILE_PATH]$_"
          if ($_ -like "*.msi") {
            Write-Host "##vso[task.setvariable variable=IS_MSI]true"
          }
        }
      } else {
        Write-Host "##vso[task.setvariable variable=FOUND_FILES]false"
      }
  displayName: 'Check for EXE/MSI changes'

# Add WiX preparation step for MSI files
- powershell: |
    # Download and extract WiX toolset
    Write-Host "Downloading WiX toolset..."
    Invoke-WebRequest -Uri "https://github.com/wixtoolset/wix3/releases/download/wix3112rtm/wix311-binaries.zip" -OutFile "wix.zip"
    Expand-Archive -Path "wix.zip" -DestinationPath "wix"

    if ("$(FILE_PATH)" -like "*.msi") {
        Write-Host "Preparing MSI file for signing..."

        # Create backup of original MSI
        Copy-Item "$(FILE_PATH)" "$(FILE_PATH).backup"

        # Extract and prepare MSI
        Write-Host "Extracting MSI binaries..."
        & "./wix/dark.exe" -x extracted "$(FILE_PATH)"

        # Prepare MSI for signing
        Write-Host "Preparing MSI with insignia..."
        & "./wix/insignia.exe" -im "$(FILE_PATH)"

        if ($LASTEXITCODE -ne 0) {
            Write-Host "Restoring original MSI from backup..."
            Copy-Item "$(FILE_PATH).backup" "$(FILE_PATH)" -Force
            Remove-Item "$(FILE_PATH).backup"
            Write-Host "MSI preparation failed with exit code $LASTEXITCODE"
            exit $LASTEXITCODE
        }

        Remove-Item "$(FILE_PATH).backup"
    }
  displayName: 'Prepare MSI for signing'
  condition: and(eq(variables['FOUND_FILES'], 'true'), eq(variables['IS_MSI'], 'true'))

- powershell: |
    if ("$(FILE_PATH)" -like "*.msi") {
        Write-Host "Signing MSI file..."
        & "$(signtool.secureFilePath)" sign `
            /a `
            /fd sha256 `
            /f "$(SIGNING_KEY_NAME)" `
            /tr http://timestamp.digicert.com `
            /td sha256 `
            /debug `
            /v `
            "$(FILE_PATH)"
    } else {
        Write-Host "Signing EXE file..."
        & "$(signtool.secureFilePath)" sign `
            /fd sha256 `
            /f "$(SIGNING_KEY_NAME)" `
            /tr http://timestamp.digicert.com `
            /td sha256 `
            "$(FILE_PATH)"
    }

    if ($LASTEXITCODE -ne 0) {
        Write-Host "Signing failed with exit code $LASTEXITCODE"
        exit $LASTEXITCODE
    }
  displayName: 'Sign file with HSM key'
  condition: eq(variables['FOUND_FILES'], 'true')

- task: DownloadSecureFile@1
  name: signtool
  inputs:
    secureFile: 'signtool.exe'
  condition: eq(variables['FOUND_FILES'], 'true')

- task: AzureKeyVault@2
  inputs:
    azureSubscription: 'codeSignPrincipal'
    KeyVaultName: 'Kahf-Yazilim-cert'
    SecretsFilter: '*'
  condition: eq(variables['FOUND_FILES'], 'true')

- powershell: |
    # Get current branch name
    $branchName = git rev-parse --abbrev-ref HEAD
    Write-Host "Current branch: $branchName"
    Write-Host "##vso[task.setvariable variable=BRANCH_NAME]$branchName"

    # Sign the file using Azure HSM key
    if ("$(FILE_PATH)" -like "*.msi") {
      # MSI specific signing
      & "$(signtool.secureFilePath)" sign `
        /a `
        /fd sha256 `
        /f "$(SIGNING_KEY_NAME)" `
        /tr http://timestamp.digicert.com `
        /td sha256 `
        "$(FILE_PATH)"
    } else {
      # Regular EXE signing
      & "$(signtool.secureFilePath)" sign `
        /fd sha256 `
        /f "$(SIGNING_KEY_NAME)" `
        /tr http://timestamp.digicert.com `
        /td sha256 `
        "$(FILE_PATH)"
    }

    if ($LASTEXITCODE -ne 0) {
      Write-Host "Signing failed with exit code $LASTEXITCODE"
      exit $LASTEXITCODE
    }
  displayName: 'Sign file with HSM key'
  condition: eq(variables['FOUND_FILES'], 'true')

- powershell: |
    git config --global user.email "pipeline@example.com"
    git config --global user.name "Azure Pipeline"
    git add "$(FILE_PATH)"
    git commit -m "Add signed file: $(FILE_PATH)"
    git push origin "$(BRANCH_NAME)"
  displayName: 'Push signed file to repo'
  condition: eq(variables['FOUND_FILES'], 'true')